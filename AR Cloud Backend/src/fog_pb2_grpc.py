# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import fog_pb2 as fog__pb2


class FogAPIStub(object):
  """For fog nodes to register themselves with cloud
  params :: ip: string, coordinates: pair(lat, long)
  return :: stream regionalFogs: list(ip)
  rpc RegisterFogNode(RequestRegisterFog) returns (ResponseRegisterFog);
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Fetch = channel.unary_unary(
        '/fogapi.FogAPI/Fetch',
        request_serializer=fog__pb2.RequestFetch.SerializeToString,
        response_deserializer=fog__pb2.ResponseFetch.FromString,
        )


class FogAPIServicer(object):
  """For fog nodes to register themselves with cloud
  params :: ip: string, coordinates: pair(lat, long)
  return :: stream regionalFogs: list(ip)
  rpc RegisterFogNode(RequestRegisterFog) returns (ResponseRegisterFog);
  """

  def Fetch(self, request, context):
    """// For fog nodes to leave
    // params :: ip: string
    // return :: None
    rpc RemoveFogNode;

    // For users to register
    // params :: ip: string, coordinates: pair(lat, long)
    // return :: stream localFogs: list(list(ip))
    rpc RegisterUser;

    For fog to tag images with their locations
    params :: imageId: int32, address: string
    return :: None
    rpc Tag(RequestTag) returns (Error);

    // For fog to lookup a location for images
    // params :: isUserFog: bool, coordinates: pair(l,l), (optional) image
    // return :: images: list(image)
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_FogAPIServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Fetch': grpc.unary_unary_rpc_method_handler(
          servicer.Fetch,
          request_deserializer=fog__pb2.RequestFetch.FromString,
          response_serializer=fog__pb2.ResponseFetch.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'fogapi.FogAPI', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
